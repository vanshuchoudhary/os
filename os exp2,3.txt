#include <iostream>
using namespace std;

int main() {
    int at[5], bt[5], wt[5], tat[5], p[5] = {0, 1, 2, 3, 4};
    float avgwt = 0, avgtat = 0;
   
    cout<<"Enter Arrival Time for the Processes - \n";
    for(int i = 0; i < 5; i++) {
        cout<<"P["<<i+1<<"] = ";
        cin>>at[i];
    }
   
    cout<<"Enter Burst Time for the Processes - \n";
    for(int i = 0; i < 5; i++) {
        cout<<"P["<<i+1<<"] = ";
        cin>>bt[i];
    }
   
    //Sorting according to Arrival Time
    int atkey, btkey, pkey, j;
    for(int i = 1; i < 5; i++) {
      atkey = at[i];
      btkey = bt[i];
      pkey = p[i];
      j = i;
      while(j > 0 && at[j-1] > atkey) {
         at[j] = at[j-1];
         bt[j] = bt[j-1];
         p[j] = p[j-1];
         j--;
      }
      at[j] = atkey;
      bt[j] = btkey;
      p[j] = pkey;
   }
   
    //Calculation of Waiting Time
    wt[p[0]] = 0; //Waiting Time for first process will be 0.
    for(int i = 1; i < 5; i++) {
        int temp = 0;
        for(int j = 0; j < i; j++) {
            temp += bt[j];
        }
        wt[p[i]] = temp - at[i];
    }
    //Calculation of Average Waiting Time
    for(int i = 0; i < 5; i++){
        avgwt += wt[i];
    }
    avgwt /= 5;
   
    //Calculation of Turn Around Time
    for(int i = 0; i < 5; i++) {
        tat[p[i]] = bt[i] + wt[p[i]];
    }
    //Calculation of Average Waiting Time
    for(int i = 0; i < 5; i++){
        avgtat += tat[i];
    }
    avgtat /= 5;
   
    cout<<"Waiting Time : \n";
    for(int i = 0; i < 5; i++) {
        cout<<"P["<<p[i]+1<<"] \t";
    }
    cout<<"\n";
    for(int i = 0; i < 5; i++) {
        cout<<wt[p[i]]<<"\t\t";
    }
    cout<<"\nAverage Waiting Time = "<<avgwt;
   
    cout<<"\nTurn Around Time : \n";
    for(int i = 0; i < 5; i++) {
        cout<<"P["<<p[i]+1<<"] \t";
    }
    cout<<"\n";
    for(int i = 0; i < 5; i++) {
        cout<<tat[p[i]]<<"\t\t";
    }
    cout<<"\n";
    cout<<"Average Turn Around Time = "<<avgtat;
   
    return 0;
}






#include <iostream>
using namespace std;

int main() {
  int n, bt[20], wt[20], tat[20], avwt = 0, avtat = 0; // Corrected variable names (avut -> avwt, autat -> avtat)
  cout << "Enter the total no. of processes: ";
  cin >> n;

  cout << "Enter the burst time for processes:" << endl; // Corrected the prompt message

  for (int i = 0; i < n; i++) {
    cout << "P" << i + 1 << "]: ";
    cin >> bt[i];
  }

  wt[0] = 0; // Initialize the first waiting time as 0

  for (int i = 1; i < n; i++) {
    wt[i] = 0;
    for (int j = 0; j < i; j++) {
      wt[i] += bt[j];
    }
  }

  for (int i = 0; i < n; i++) {
    tat[i] = bt[i] + wt[i];
    avwt += wt[i]; // Corrected variable name (avut -> avwt)
    avtat += tat[i];
  }

  avwt /= n; // Corrected variable name (avut -> avwt)
  avtat /= n; // Corrected variable name (autat -> avtat)

  cout << "\nProcess \t Burst Time \t Waiting Time \t Turnaround Time \n";
  for (int i = 0; i < n; i++) {
    cout << "PC" << i + 1 << "\t\t" << bt[i] << "\t\t" << wt[i] << "\t\t"
         << tat[i] << endl;
  }

  cout << "\nAverage Waiting Time: " << avwt << endl; // Corrected double quotes
  cout << "Average Turnaround Time: " << avtat << endl; // Corrected double quotes

  return 0;
}




sjf

#include <bits/stdc++.h>  
using namespace std;  
//structure for every process  
struct Process {  
   int pid; // Process ID  
   int bt; // Burst Time  
   int art; // Arrival Time  
};  
void findTurnAroundTime(Process proc[], int n, int wt[], int tat[]) {  
   for (int i = 0; i < n; i++)  
   tat[i] = proc[i].bt + wt[i];  
}  
//waiting time of all process  
void findWaitingTime(Process proc[], int n, int wt[]) {  
   int rt[n];  
   for (int i = 0; i < n; i++)  
   rt[i] = proc[i].bt;  
   int complete = 0, t = 0, minm = INT_MAX;  
   int shortest = 0, finish_time;  
   bool check = false;  
   while (complete != n) {  
      for (int j = 0; j < n; j++) {  
         if ((proc[j].art <= t) && (rt[j] < minm) && rt[j] > 0) {  
            minm = rt[j];  
            shortest = j;  
            check = true;  
         }  
      }  
      if (check == false) {  
         t++;  
         continue;  
      }  
      // decrementing the remaining time  
      rt[shortest]--;  
      minm = rt[shortest];  
      if (minm == 0)  
         minm = INT_MAX;  
         // If a process gets completely  
         // executed  
         if (rt[shortest] == 0) {  
            complete++;  
            check = false;  
            finish_time = t + 1;  
            // Calculate waiting time  
            wt[shortest] = finish_time -  
            proc[shortest].bt -  
            proc[shortest].art;  
            if (wt[shortest] < 0)  
               wt[shortest] = 0;  
         }  
         // Increment time  
         t++;  
   }  
}  
// Function to calculate average time  
void findavgTime(Process proc[], int n) {  
   int wt[n], tat[n], total_wt = 0,  
   total_tat = 0;  
   // Function to find waiting time of all  
   // processes  
   findWaitingTime(proc, n, wt);  
   // Function to find turn around time for  
   // all processes  
   findTurnAroundTime(proc, n, wt, tat);  
   cout << "Processes " << " Burst time " << " Waiting time " << " Turn around time\n";  
   for (int i = 0; i < n; i++) {  
      total_wt = total_wt + wt[i];  
      total_tat = total_tat + tat[i];  
      cout << " " << proc[i].pid << "\t\t" << proc[i].bt << "\t\t " << wt[i] << "\t\t " << tat[i] << endl;  
   }  
   cout << "\nAverage waiting time = " << (float)total_wt / (float)n; cout << "\nAverage turn around time = " << (float)total_tat / (float)n;  
}  
// main function  
int main() {  
   Process proc[] = { { 1, 5, 1 }, { 2, 3, 1 }, { 3, 6, 2 }, { 4, 5, 3 } };  
   int n = sizeof(proc) / sizeof(proc[0]);  
   findavgTime(proc, n);  
   return 0;  
}  